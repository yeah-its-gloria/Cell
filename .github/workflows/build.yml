name: Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
#  build-ubuntu:
#    name: Ubuntu Release
#    runs-on: ubuntu-22.04
#    steps:
#      - name: Perform checkout
#        uses: actions/checkout@v4
#
#      - name: Install dependencies
#        run: |
#          sudo apt update
#          sudo apt install -y cmake ninja-build libvulkan-dev libwayland-dev libopenxr-dev libxkbcommon-dev libpulse-dev clang lld llvm
#
#        # Required as Ubuntu 22.04 doesn't have a good glslc package (we normally require 24.04)
#      - name: Fetch glslc
#        run: |
#          curl -L -O https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/435/20230810-123653/install.tgz
#          tar xvf install.tgz
#
#      - name: Configure
#        working-directory: ${{ github.workspace }}
#        run: >
#          cmake
#          -B build
#          -G Ninja
#          -DCMAKE_BUILD_TYPE=Release
#          -DCMAKE_C_COMPILER=clang
#          -DCMAKE_CXX_COMPILER=clang++
#          -Dglslc_PROGRAM=${{ github.workspace }}/install/bin/glslc
#          -Dspirv-link_PROGRAM=${{ github.workspace }}/install/bin/spirv-link
#
#      - name: Build
#        run: cmake --build ${{ github.workspace }}/build -j
#
#      - name: Test
#        working-directory: ${{ github.workspace }}/build
#        run: ctest --build-config Release

  build-windows:
    name: Windows Release
    runs-on: windows-latest
    steps:
      - name: Perform checkout
        uses: actions/checkout@v4

      - name: Install LLVM
        uses: KyleMayes/install-llvm-action@v1.9.0
        with:
          version: "17.0"

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Fetch glslc
        working-directory: ${{ github.workspace }}
        run: |
          curl.exe -L -O https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2017/438/20230810-123700/install.zip
          7z.exe x install.zip

      - name: Fetch OpenXR SDK
        uses: actions/checkout@v4
        with:
          repository: KhronosGroup/OpenXR-SDK
          path: ${{ github.workspace }}/openxr-sdk

      - name: Generate cache ID for OpenXR
        working-directory: ${{ github.workspace }}/openxr-sdk
        run: git rev-parse HEAD >> ${{ github.workspace }}/openxr-hash

      - name: Cache OpenXR build
        id: cache-openxr
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/openxr-sdk/build/
          key: ${{ runner.os }}-openxr-build-${{ hashFiles('openxr-hash') }}

      - if: ${{ steps.cache-openxr.outputs.cache-hit != 'true' }}
        name: Configure OpenXR
        working-directory: ${{ github.workspace }}/openxr-sdk
        run: >
          cmake
          -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DGLSL_COMPILER=${{ github.workspace }}/install/bin/glslc.exe
          -DGLSLANG_VALIDATOR=${{ github.workspace }}/install/bin/glslangValidator.exe

      - if: ${{ steps.cache-openxr.outputs.cache-hit != 'true' }}
        name: Build OpenXR
        working-directory: ${{ github.workspace }}/openxr-sdk
        run: cmake --build build -j

      - name: Configure
        working-directory: ${{ github.workspace }}
        run: >
          cmake
          -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DOpenXR_LIBRARY=${{ github.workspace }}/openxr-sdk/build/src/loader/openxr_loader.lib
          -DOpenXR_INCLUDE_DIR=${{ github.workspace }}/openxr-sdk/include
          -Dglslc_PROGRAM=${{ github.workspace }}/install/bin/glslc.exe
          -Dspirv-link_PROGRAM=${{ github.workspace }}/install/bin/spirv-link.exe

      - name: Build
        run: cmake --build ${{ github.workspace }}/build -j

      - name: Test
        working-directory: ${{ github.workspace }}/build
        run: ctest .
